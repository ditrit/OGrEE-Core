name: Wait a job to finish
description: Wait for a particular job in the repository before continuing

inputs:
  WAIT_INTERVAL:
    description: "Time to wait between each check"
    required: false
    default: "20"
  MAX_ATTEMPTS:
    description: "Maximum number of attempts"
    required: false
    default: "90"
  JOB_PATH:
    description: "Name of the job to wait for"
    required: false
    default: ".github/workflows/build-deploy.yaml"
  BRANCH:
    description: "Branch to wait for"
    required: false
    default: "main"
  GITHUB_TOKEN:
    description: "github token"
    required: true


runs:
  using: composite
  steps:
    - name: 📍 Get last commit SHA
      shell: bash
      run: |
        echo "LAST_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "BRANCH=$( echo "${{ inputs.BRANCH }}" | sed 's/\//%2F/g')" >> $GITHUB_ENV

    - name: ⌛ Wait for job to complete
      shell: bash
      run: |
        JOB_COMPLETE="false"
        ATTEMPS=0

        while [[ $JOB_COMPLETE != "true" ]]; do
          RESULT=$(curl -s -X GET "https://api.github.com/repos/ditrit/${{ github.event.repository.name }}/actions/runs?branch=${{ env.BRANCH }}&event=push&head_sha=${{ env.LAST_COMMIT_SHA }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${{ inputs.GITHUB_TOKEN }}" | \
            jq '.workflow_runs[] | select(.path=="${{ inputs.JOB_PATH }}")')
          
          JOB_IN_PROGRESS=$(echo $RESULT | jq "select((.status==\"in_progress\") or (.status==\"waiting\") or (.status==\"pending\") or (.status==\"requested\") or (.status==\"queued\")) | has(\"id\")")
          JOB_FAILED=$(echo $RESULT | jq "select(.status==\"failure\") | has(\"id\")")

          if [[ $JOB_IN_PROGRESS == true && $ATTEMPS > ${{ inputs.MAX_ATTEMPTS }} ]]; then
              echo "Job not complete, max attempts reached"
              exit 1
          elif [[ $JOB_IN_PROGRESS == true ]]; then
              echo "Job not complete, waiting ${{ inputs.WAIT_INTERVAL }} seconds"
              sleep ${{ inputs.WAIT_INTERVAL }}
          elif [[ $JOB_FAILED == true ]]; then
              echo "[ERROR] Job failed..."
          elif [[ $JOB_IN_PROGRESS == '' && $JOB_FAILED == '' ]]; then
              echo "Job complete"
              JOB_COMPLETE="true"
              break
          fi
        done
