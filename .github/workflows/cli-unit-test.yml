on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths:
    - CLI/**

name: 🕵️‍♂️ CLI Unit Tests

jobs:
  cli-unit-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./CLI
    
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.4

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest

    - name: Install gocov
      run: go install github.com/axw/gocov/gocov@latest

    - name: Install gocov-xml
      run: go install github.com/AlekSi/gocov-xml@latest
      
    - name: Build
      run: make
    
    - name: Test
      run: gotestsum --junitfile tests-cli.xml -- -coverprofile=coverage_cli.out -p 1 `go list ./... | grep -v ./readline | grep -v ./mocks`

    - name: Log Test Coverage
      run: go tool cover -func coverage_cli.out | grep total

    - name: Generate coverage XML report
      run: gocov convert coverage_cli.out | gocov-xml > coverage_cli.xml

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always() # run this step even if previous steps failed
      with:
        name: CLI Tests Report  # Name of the check run which will be created
        path: ./CLI/tests-cli.xml     # Path to test results
        reporter: java-junit                 # Format of test results

    - uses: actions/upload-artifact@v4
      with:
        name: coverage_cli
        path: ./CLI/coverage_cli.out

    - uses: actions/upload-artifact@v4
      with:
        name: coverage_cli_xml
        path: ./CLI/coverage_cli.xml

  generate-coverage-badge:
    needs: cli-unit-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./
    if: github.ref == 'refs/heads/main' && github.event.head_commit.author.name != 'GitHubActions'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install requests
        run: pip install requests

      - name: Install pycobertura
        run: pip install pycobertura

      - name: Download line coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage_cli_xml

      - name: Generate badge
        run: python assets/badge_generator/generate_badge.py --label "CLI coverage" --output cli_coverage_badge.svg --input-report coverage_cli.xml --red-limit 50 --green-limit 65

      - uses: actions/upload-artifact@v4
        with:
          name: cli_coverage_badge
          path: cli_coverage_badge.svg

  upload-coverage-badge:
    needs: generate-coverage-badge
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./
    if: github.ref == 'refs/heads/main' && github.event.head_commit.author.name != 'GitHubActions'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: coverage_badges

      - name: Download coverage badge
        uses: actions/download-artifact@v4
        with:
          name: cli_coverage_badge

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v16
        id: verify-changed-files
        with:
          files: cli_coverage_badge.svg

      - name: Commit badge
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "<>"
          git config --local user.name "GitHubActions"
          git add cli_coverage_badge.svg
          git commit -m "Add/Update badge"

      - name: Push badge commit
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: coverage_badges # Dedicated branch to store coverage badges
