{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This the swagger documentation for the API of the OGrEE project developed by DitRit.\nCheck our project here: https://github.com/ditrit/OGrEE-Core",
    "title": "OGrEE API",
    "contact": {
      "name": "DitRit",
      "url": "https://ditrit.io",
      "email": "contact@ditrit.io"
    },
    "version": "1.0"
  },
  "host": "localhost:3001",
  "basePath": "/",
  "paths": {
    "/api/domains/bulk": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "An array of domains should be provided in the body.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Create multiple domains in a single request.",
        "operationId": "CreateBulkDomain",
        "parameters": [
          {
            "default": [
              {}
            ],
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed. Check the response body for individual results for each of the sent domains"
          },
          "400": {
            "description": "Bad format: body is not a valid list of domains."
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Get real-time notifications (SSE stream)\nOpens a SSE stream with the caller where the API will send a new event (message in JSON format)\nevery time a modify or delete of any object succeeds. Also applies to create layer.",
        "produces": [
          "text/event-stream"
        ],
        "tags": [
          "Events"
        ],
        "operationId": "CreateEventStream",
        "responses": {
          "200": {
            "description": "Successfully established stream, keep it open."
          }
        }
      }
    },
    "/api/hierarchy": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Return is arranged by relationship (father:[children]), starting with \"\\*\":[sites].\nThe \"\\*\" indicates root.\nUser permissions apply.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Returns system complete hierarchy.",
        "operationId": "GetCompleteHierarchy",
        "parameters": [
          {
            "description": "One of the values: physical, logical or organisational. If none provided, all namespaces are used by default.",
            "name": "namespace",
            "in": "query"
          },
          {
            "description": "besides the hierarchy, returns also an structure with the objects organized by category.",
            "name": "withcategories",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Request is valid."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/hierarchy/attributes": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Return is arranged by hierarchyName (objHierarchyName:{attributes}).\nUser permissions apply.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Returns attributes of all objects.",
        "operationId": "GetCompleteHierarchyAttrs",
        "responses": {
          "200": {
            "description": "Request is valid."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/image/{id}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns a HTTP response with the binary of the image.\nThe format of the image will correspond to the content type of the response.",
        "produces": [
          "image/*",
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Gets an image by its id.",
        "operationId": "GetImage",
        "parameters": [
          {
            "type": "string",
            "description": "ID of image",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with the image binary."
          },
          "404": {
            "description": "Not Found. An error message will be returned."
          }
        }
      }
    },
    "/api/layers/{id}/objects": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Apply the layer filters to get children objects of a given root query param.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Gets the object of a given layer.",
        "operationId": "GetLayerObjects",
        "parameters": [
          {
            "type": "string",
            "default": "layer_slug",
            "description": "ID of desired layer.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Mandatory, accepts IDs. The root object from where to apply the layer",
            "name": "root",
            "in": "query",
            "required": true
          },
          {
            "description": "Accepts true or false. If true, get objects from all levels beneath root. If false, get objects directly under root.",
            "name": "recursive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "400": {
            "description": "Bad request. An error message will be returned."
          },
          "404": {
            "description": "Not Found. An error message will be returned."
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "description": "Create a new JWT Key. This can also be used to verify credentials\nThe authorize and 'Try it out' buttons don't work",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Generates a new JWT Key for the client.",
        "operationId": "Authenticate",
        "parameters": [
          {
            "format": "object",
            "example": "{\"email\": \"user@test.com\", \"password\": \"secret123\"}",
            "description": "Mandatory: email and password.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/objects": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": " Special Terms | Meaning                                     |\n-------------  | --------------------------------------------|\n `*`           | matches any sequence of non-path-separators |\n `.**.`        | matches zero or more directories            |\n `.**{m,M}.`   | matches from m to M directories             |\n\nA doublestar (`**`) should appear surrounded by id separators such as `.**.`.\nA mid-pattern doublestar (`**`) behaves like star: a pattern\nsuch as `path.to.**` would return the same results as `path.to.*`. To apply recursion, the\nid you're looking for is `path.to.**.*`.\nExamples:\nid=path.to.a* will return all the children of path.to which name starts with a.\nid=path.to.`**`.a* will return all the descendant hierarchy of path.to which name starts with a.\nid=path.to.`**`{1,3}.a* will return all the grandchildren to great-great-grandchildren of path.to which name starts with a.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Get all objects from any entity. Return as a list.\nWildcards can be used on any of the parameters present in query.",
        "operationId": "GetGenericObject",
        "parameters": [
          {
            "description": "id of the object to obtain. If none provided, all objects of the namespace will be obtained",
            "name": "id",
            "in": "path"
          },
          {
            "description": "One of the values: physical, physical.stray, physical.hierarchy, logical, logical.objtemplate, logical.bldgtemplate, logical.roomtemplate, logical.tag, organisational. If none provided, all namespaces are used by default.",
            "name": "namespace",
            "in": "query"
          },
          {
            "description": "specify which object field to show in response. Multiple fieldOnly can be added. An invalid field is simply ignored.",
            "name": "fieldOnly",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Get limit level of hierarchy for objects in the response. It must be specified alongside id. Example: ?limit=1\u0026id=siteA.B.R1 will return the object R1 with its children nested. ?limit=2\u0026id=siteA.B.R1.* will return all objects one level above R1 with its up to two levels children nested.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "domain=DemoDomain",
            "example": "vendor=ibm ; name=siteA ; orientation=front",
            "description": "Any other object attributes can be queried. Replace attributes here by the name of the attribute followed by its value.",
            "name": "attributes",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "500": {
            "description": "Internal Error. A system error stopped the request."
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": " Special Terms | Meaning                                     |\n-------------  | --------------------------------------------|\n `*`           | matches any sequence of non-path-separators |\n `.**.`        | matches zero or more directories            |\n `.**{m,M}.`   | matches from m to M directories             |\n\nA doublestar (`**`) should appear surrounded by id separators such as `.**.`.\nA mid-pattern doublestar (`**`) behaves like star: a pattern\nsuch as `path.to.**` would return the same results as `path.to.*`. To apply recursion, the\nid you're looking for is `path.to.**.*`.\nExamples:\nid=path.to.a* will delete all the children of path.to which name starts with a.\nid=path.to.**.a* will delete all the descendant hierarchy of path.to which name starts with a.\nid=path.to.**{1,3}.a* will delete all the grandchildren to great-great-grandchildren of path.to which name starts with a.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Deletes an object in the system from any of the entities with no need to specify it.\nWildcards can be used on any of the parameters present in query.",
        "operationId": "DeleteGenericObject",
        "parameters": [
          {
            "description": "ID type hierarchyName of the object",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "specify which object field to show in response. Multiple fieldOnly can be added. An invalid field is simply ignored.",
            "name": "fieldOnly",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          },
          {
            "description": "One of the values: physical, physical.stray, physical.hierarchy, logical, logical.objtemplate, logical.bldgtemplate, logical.roomtemplate, logical.tag, organisational. If none provided, all namespaces are used by default.",
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted object"
          },
          "404": {
            "description": "Not found. An error message will be returned"
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "FlutterApp"
        ],
        "summary": "Get a list of projects for the specified user.",
        "operationId": "GetProjects",
        "parameters": [
          {
            "type": "string",
            "default": "user@test.com",
            "description": "Email of the user whose projects are being requested. Example: /api/projects?user=user@test.com",
            "name": "user",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return all possible projects."
          },
          "400": {
            "description": "Bad Request. Invalid user query param."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Create a new project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "FlutterApp"
        ],
        "operationId": "CreateProjects",
        "parameters": [
          {
            "format": "object",
            "example": "{\"attributes\":[\"domain\"],\"authorLastUpdate\":\"helder\",\"dateRange\":\"01/01/2023-02/02/2023\", \"lastUpdate\":\"02/02/2023\",\"name\":\"test 1\",\"namespace\":\"physical\",\"objects\":[\"siteB\"],\"showAvg\":false, \"showSum\":false,\"permissions\":[\"user@test.com\",\"admin\"]}",
            "description": "Mandatory: name, dateRange, namespace, attributes, objects, permissions, authorLastUpdate, lastUpdate. Optional: showAvg, showSum, isPublic.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully created."
          },
          "400": {
            "description": "Bad Request. Invalid project format."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/projects/{ProjectID}": {
      "put": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "FlutterApp"
        ],
        "summary": "Replace the data of an existing project.",
        "operationId": "UpdateProjects",
        "parameters": [
          {
            "type": "string",
            "default": "1234",
            "description": "ID of the project to update.",
            "name": "ProjectID",
            "in": "path",
            "required": true
          },
          {
            "format": "object",
            "example": "{\"attributes\":[\"domain\"],\"authorLastUpdate\":\"helder\",\"dateRange\":\"01/01/2023-02/02/2023\", \"lastUpdate\":\"02/02/2023\",\"name\":\"test 1\",\"namespace\":\"physical\",\"objects\":[\"siteB\"],\"showAvg\":false, \"showSum\":false,\"permissions\":[\"user@test.com\",\"admin\"]}",
            "description": "Mandatory: name, dateRange, namespace, attributes, objects, permissions, authorLastUpdate, lastUpdate. Optional: showAvg, showSum, isPublic.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully updated."
          },
          "400": {
            "description": "Bad Request. Invalid project format."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "FlutterApp"
        ],
        "summary": "Delete an existing project.",
        "operationId": "DeleteProjects",
        "parameters": [
          {
            "type": "string",
            "default": "1234",
            "description": "ID of the project to delete.",
            "name": "ProjectID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Project successfully updated."
          },
          "404": {
            "description": "Not Found. Invalid project ID."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/stats": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "About"
        ],
        "summary": "Displays DB statistics.",
        "operationId": "GetStats",
        "responses": {
          "200": {
            "description": "Request is valid."
          },
          "504": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/stray-objects/{id}/link": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "The object will again have a parent, its id will change as well as the id of all its children.\nThe object will then belong to the given entity.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Removes the object from stray and add it to the entity of its category attribute.",
        "operationId": "LinkObject",
        "parameters": [
          {
            "type": "string",
            "default": "StrayRackB",
            "description": "ID of desired object.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "default": {
              "name": "MyNewObjectName",
              "parentId": "MyNewParent"
            },
            "description": "ParentId is mandatory. Name is optional.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Linked. The object is no longer a stray."
          },
          "400": {
            "description": "Bad request. Request has wrong format."
          },
          "500": {
            "description": "Internal error. Unable to remove object from stray and create it in an entity."
          }
        }
      }
    },
    "/api/tempunits/{id}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Gets the temperatureUnit attribute of the parent site of given object.",
        "operationId": "GetTempUnit",
        "parameters": [
          {
            "type": "string",
            "default": "siteA",
            "description": "ID of desired object. For templates the slug is the ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "404": {
            "description": "Nothing Found. An error message will be returned."
          }
        }
      }
    },
    "/api/token/valid": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Verify if token sent in the header is valid.",
        "operationId": "VerifyToken",
        "responses": {
          "200": {
            "description": "Token is valid."
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Get a list of users that the caller is allowed to see.",
        "operationId": "GetAllAccounts",
        "responses": {
          "200": {
            "description": "Return all possible users"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Create an account with email and password credentials, it returns\na JWT key to use with the API.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Create a new user user.",
        "operationId": "CreateAccount",
        "parameters": [
          {
            "format": "object",
            "example": "{\"name\": \"John Doe\", \"roles\": {\"*\": \"manager\"}, \"email\": \"user@test.com\", \"password\": \"secret123\"}",
            "description": "Mandatory: email, password and roles. Optional: name. Roles is an object with domains as keys and roles as values. Possible roles: manager, user and viewer",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "New account created"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "User not authorised to create an account"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/bulk": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Create multiples users with one request.",
        "operationId": "CreateBulk",
        "parameters": [
          {
            "format": "object",
            "example": "[{\"name\": \"John Doe\", \"roles\": {\"*\": \"manager\"}, \"email\": \"user@test.com\"}]",
            "description": "An array of users. Same mandatory and optional parameters as user apply, except for password. If not provided, one will be automatically created by the API.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed, check response body for results"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/password/change": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "For logged in user to change its own password.",
        "operationId": "ModifyUserPassword",
        "parameters": [
          {
            "type": "json",
            "example": "{\"currentPassword\": \"myOldPassword\", \"newPassword\": \"myNewPassword\"}",
            "description": "Mandatory: currentPassword and newPassword.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/password/forgot": {
      "post": {
        "description": "Public endpoint to request a reset of a user's password (forgot my password).\nIf the email is valid, an email with a reset token/link will be sent to the user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Forgot my password.",
        "operationId": "UserForgotPassword",
        "parameters": [
          {
            "type": "string",
            "example": "{\"email\": \"user@test.com\"}",
            "description": "Mandatory: email.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "request processed. If account exists, an email with a reset token is sent"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/password/reset": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "For user that first called forgot enpoint to change its password.\nA reset token generated by the forgot endpoint should be provided as the Authentication header.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Authentication"
        ],
        "summary": "Reset password after forgot.",
        "operationId": "ResetUserPassword",
        "parameters": [
          {
            "type": "json",
            "example": "\"newPassword\": \"myNewPassword\"}",
            "description": "Mandatory: currentPassword and newPassword.",
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/users/{UserId}": {
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Remove the specified user account.",
        "operationId": "RemoveAccount",
        "parameters": [
          {
            "type": "string",
            "example": "someUserId",
            "description": "The ID of the user to delete",
            "name": "UserId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User removed"
          },
          "400": {
            "description": "User ID not valid or not found"
          },
          "403": {
            "description": "Caller not authorised to delete this user"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Modify user permissions: domain and role.",
        "operationId": "ModifyUserRoles",
        "parameters": [
          {
            "type": "string",
            "example": "someUserId",
            "description": "The ID of the user to modify roles",
            "name": "UserId",
            "in": "path",
            "required": true
          },
          {
            "type": "json",
            "example": "{\"roles\": {\"*\": \"manager\"}}",
            "description": "An object with domains as keys and roles as values",
            "name": "roles",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User roles modified"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Caller not authorised to modify this user"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/validate/{entity}": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Checks the received data and verifies if the object can be created in the system.",
        "operationId": "ValidateObject",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, stray-objects, tags.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "default": {},
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Createable. A response body will be returned with a meaningful message."
          },
          "400": {
            "description": "Bad request. A response body with an error message will be returned."
          },
          "404": {
            "description": "Not Found. An error message will be returned."
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "About"
        ],
        "summary": "Gets the API version.",
        "operationId": "GetAPIVersion",
        "responses": {
          "200": {
            "description": "OK. A response body will be returned with version details."
          }
        }
      }
    },
    "/api/{entity}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns JSON body with all specified objects of type.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Gets all present objects for specified entity (category).",
        "operationId": "GetAllEntities",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, stray-objects, tags",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "description": "specify which object field to show in response. Multiple fieldOnly can be added. An invalid field is simply ignored.",
            "name": "fieldOnly",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "404": {
            "description": "Nothing Found. An error message will be returned."
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Creates an object of the given entity in the system.",
        "operationId": "CreateObject",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, tags, stray-objects, hierarchy-objects.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "default": {},
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created. A response body will be returned with a meaningful message."
          },
          "400": {
            "description": "Bad request. A response body with an error message will be returned."
          }
        }
      }
    },
    "/api/{entity}/{id}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "The ID or hierarchy name must be provided in the URL parameter.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Gets an Object of the given entity.",
        "operationId": "GetEntity",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, tags, stray-objects, hierarchy-objects.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "siteA",
            "description": "ID of desired object. For templates and tags the slug is the ID.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "specify which object field to show in response. Multiple fieldOnly can be added. An invalid field is simply ignored.",
            "name": "fieldOnly",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "400": {
            "description": "Bad request. An error message will be returned."
          },
          "404": {
            "description": "Not Found. An error message will be returned."
          }
        }
      },
      "put": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "This method will replace the existing data with the JSON\nreceived, thus fully replacing the data. If you do not\nwant to do this, please use PATCH.\nIf no data is effectively changed, an OK will still be returned.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Completely update object.",
        "operationId": "UpdateObject",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, tags, stray-objects, hierarchy-objects.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "siteA",
            "description": "ID of desired object. For templates and tags the slug is the ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updated. A response body will be returned with a meaningful message."
          },
          "400": {
            "description": "Bad request. An error message will be returned."
          },
          "404": {
            "description": "Not Found. An error message will be returned."
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Deletes an Object in the system.",
        "operationId": "DeleteObject",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, tags, stray-objects, hierarchy-objects.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "siteA",
            "description": "ID of desired object. For templates and tags the slug is the ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted object. No response body will be returned"
          },
          "404": {
            "description": "Not found. An error message will be returned"
          }
        }
      },
      "patch": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "This is the preferred method for modifying data in the system.\nIf you want to do a full data replace, please use PUT instead.\nIf no data is effectively changed, an OK will still be returned.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Partially update object.",
        "operationId": "PartialUpdateObject",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, stray-objects, tags.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "siteA",
            "description": "ID of desired object. For templates and tags the slug is the ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updated. A response body will be returned with a meaningful message."
          },
          "400": {
            "description": "Bad request. An error message will be returned."
          },
          "404": {
            "description": "Not Found. An error message will be returned."
          }
        }
      }
    },
    "/api/{entity}/{id}/all": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns JSON body with all subobjects under the Object.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Get object and all its children.",
        "operationId": "GetEntityHierarchy",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, stray-objects, hierarchy-objects.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "siteA",
            "description": "ID of desired object.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": 1,
            "description": "Limits the level of hierarchy for retrieval. if not specified for devices then the default value is maximum. Example: /api/devices/{id}/all?limit=2",
            "name": "limit",
            "in": "query"
          },
          {
            "description": "specify which object field to show in response. Multiple fieldOnly can be added. An invalid field is simply ignored.",
            "name": "fieldOnly",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "404": {
            "description": "Nothing Found. An error message will be returned."
          }
        }
      }
    },
    "/api/{entity}/{id}/unlink": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "The object will no longer have a parent, its id will change as well as the id of all its children.\nThe object will then belong to the stray-objects entity.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Removes the object from its original entity and hierarchy tree to make it stray.",
        "operationId": "UnlinkObject",
        "parameters": [
          {
            "type": "string",
            "default": "Site.Building.Room.RackB",
            "description": "ID of desired object.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "default": {
              "name": "MyNewStrayObjectName"
            },
            "description": "Name is optional to change the name of the object when turning stray.",
            "name": "body",
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Unlinked. The object is now a stray."
          },
          "400": {
            "description": "Bad request. Request has wrong format."
          },
          "500": {
            "description": "Internal error. Unable to remove object from entity and create it as stray."
          }
        }
      }
    },
    "/api/{entity}/{id}/{subent}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Subent must be lower than entity in the hierarchy.\nExamples:\napi/sites/{id}/rooms will return all rooms of a site\napi/room/{id}/devices will return all devices of a room\nReturns a JSON body with all children objects under the parent object.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Obtain all children object of given id that belong to subent entity.",
        "operationId": "GetEntitiesOfAncestor",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Indicates the entity.",
            "name": "entity",
            "in": "query",
            "required": true
          },
          {
            "type": "int",
            "default": "siteA",
            "description": "ID of object",
            "name": "ID",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "buildings",
            "description": "Indicates the subentity to search for children.",
            "name": "subent",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "404": {
            "description": "Nothing Found. An error message will be returned."
          }
        }
      }
    },
    "/api/{entity}?": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Gets an Object using any attribute (with the exception of description)\nvia query in the system\nThe attributes are in the form {attr}=xyz\u0026{attr1}=abc\nAnd any combination can be used given that at least 1 is provided.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Objects"
        ],
        "summary": "Gets an object filtering by attribute.",
        "operationId": "GetEntityByQuery",
        "parameters": [
          {
            "type": "string",
            "default": "sites",
            "description": "Entity (same as category) of the object. Accepted values: sites, domains, buildings, rooms, racks, devices, acs, panels, cabinets, groups, corridors, room-templates, obj-templates, bldg-templates, stray-objects, tags.",
            "name": "entity",
            "in": "path",
            "required": true
          },
          {
            "description": "specify which object field to show in response. Multiple fieldOnly can be added. An invalid field is simply ignored.",
            "name": "fieldOnly",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003e= startDate. Format: yyyy-mm-dd",
            "name": "startDate",
            "in": "query"
          },
          {
            "description": "filter objects by lastUpdated \u003c= endDate. Format: yyyy-mm-dd",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "default": "domain=DemoDomain",
            "example": "vendor=ibm ; name=siteA ; orientation=front",
            "description": "Any other object attributes can be queried. Replace attributes here by the name of the attribute followed by its value.",
            "name": "attributes",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Found. A response body will be returned with a meaningful message."
          },
          "404": {
            "description": "Not found. An error message will be returned."
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}