// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CommandController is an autogenerated mock type for the CommandController type
type CommandController struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: path
func (_m *CommandController) GetObject(path string) (map[string]interface{}, error) {
	ret := _m.Called(path)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectWithChildren provides a mock function with given fields: path, depth
func (_m *CommandController) GetObjectWithChildren(path string, depth int) (map[string]interface{}, error) {
	ret := _m.Called(path, depth)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (map[string]interface{}, error)); ok {
		return rf(path, depth)
	}
	if rf, ok := ret.Get(0).(func(string, int) map[string]interface{}); ok {
		r0 = rf(path, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(path, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollObjectWithChildren provides a mock function with given fields: path, depth
func (_m *CommandController) PollObjectWithChildren(path string, depth int) (map[string]interface{}, error) {
	ret := _m.Called(path, depth)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (map[string]interface{}, error)); ok {
		return rf(path, depth)
	}
	if rf, ok := ret.Get(0).(func(string, int) map[string]interface{}); ok {
		r0 = rf(path, depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(path, depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateObj provides a mock function with given fields: path, data
func (_m *CommandController) UpdateObj(path string, data map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(path, data)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (map[string]interface{}, error)); ok {
		return rf(path, data)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommandController interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandController creates a new instance of CommandController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandController(t mockConstructorTestingTNewCommandController) *CommandController {
	mock := &CommandController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
