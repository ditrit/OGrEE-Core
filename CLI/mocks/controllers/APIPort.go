// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	controllers "cli/controllers"

	mock "github.com/stretchr/testify/mock"
)

// APIPort is an autogenerated mock type for the APIPort type
type APIPort struct {
	mock.Mock
}

// Request provides a mock function with given fields: method, endpoint, body, expectedStatus
func (_m *APIPort) Request(method string, endpoint string, body map[string]interface{}, expectedStatus int) (*controllers.Response, error) {
	ret := _m.Called(method, endpoint, body, expectedStatus)

	var r0 *controllers.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}, int) (*controllers.Response, error)); ok {
		return rf(method, endpoint, body, expectedStatus)
	}
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}, int) *controllers.Response); ok {
		r0 = rf(method, endpoint, body, expectedStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controllers.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}, int) error); ok {
		r1 = rf(method, endpoint, body, expectedStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAPIPort interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPIPort creates a new instance of APIPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPIPort(t mockConstructorTestingTNewAPIPort) *APIPort {
	mock := &APIPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
